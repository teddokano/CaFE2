#
#	"cafe.lib"
#
#		cafe standard library
#

#............................................................version infomation

#
#	## log ##
#	This file is forked from ~/.cafe file on 23-Aug-2006
#

"cafe.stdlib" package

: SUPPRESS_ALL	0 ;
: SUPPRESS_WARN	2 ;
: SUPPRESS_OFF	3 ;
: SHOW_ALL		4 ;



#............................................................defining FUNCTIONS
#............... general utilities 

:gw		(s1 s2 s3 -- "s1s3s2")		# gluing strings with character which is given as argument
		swap glue glue;
		
:gs		(s1 s2 -- "s1 s2")			# gluing strings with " " space
		" " swap glue glue;
		
:gc		(s1 s2 -- "s1, s2")			# gluing strings with "," space
		", " swap glue glue;
		
:.h		( -- )						# showing stack top as hexadecimal
		depth 
		ifelse p 
		'pop dup "0x%X\n" format_print'
		'pop'
;

:.nB	(i -- )						# showing stack top as binary
		>nbits
		
		<nbits ifelse z 
			'32 >nbits 0 >flag' 
			'1 >flag'
		pop
	
		depth 
		ifelse p 
		:@ 
			pop 
			
			<nbits >bitpos
			
			<nbits times 
			:@
				dup <bitpos 1- dup >bitpos nright 
				0x1 and 
				
				if t 'dup >flag'
															
				<flag ifelse t 
					'pop "%01d" format_print' 
					'pop pop'
			;
			
			"\n" format_print
		;
		:@ 
			pop 
		;
;



:.b		( -- )						# showing stack top in binary. leading zeros will not appear
		0 .nB;
		
:.B		( -- )						# showing stack top in binary. 32bit will be shown
		32 .nB;
		
:.x		( -- )						# showing stack top in hexadecimal
		.h;
		
:hex	( -- )						# changing integer display mode to hex
		"0x%lX" >$$FORMAT_INT$;
		
:dec	( -- )						# changing integer display mode to default
		"%ld" >$$FORMAT_INT$;

:isinteger	( -- i)					# check type "INTEGER"
		type "INTEGER" compare;

:isfloat	( -- i)					# check type "FLOAT"
		type "FLOAT" compare;

:isnumber	( -- i)					# check type "INTEGER" || "FLOAT" 
		isinteger >tmp
		isfloat <tmp + ;

:isstring	( -- i)					# check type "STRING"
		type "STRING" compare;

:isstack	( -- i)					# check type "STACK"
		type "STACK" compare;



#............................................................defining FUNCTIONS
#............... user stack controls/view

:{		( -- !)						# prepare new stack
		=new =target ;
		
:}		( -- !)						# return to parent stack, push content of content
		=parent =target 0 =copy pop;
		
:k}		( -- !)						# switch to parent stack
		=parent =target;
		
:={		( -- !)						# switching stack to target
		=target;
:=}		( -- !)						# switching stack to parent
		=parent =target;


:=pcp	( -- !)						# copy parent stack contents to current stack		
		=parent 0 =copy pop;

:=pmv	( -- !)						# move parent stack contents to current stack
		=parent 0 =copy pop 
		=parent =target 
		>tmp cl <tmp
;

:stk		( -- )						# display contents of current stack horizontally
		{								# prepare new stack
			=pcp 						# copy parent stack contents
			depth 1- times gc 			# if there is 2 or more items, glue those with ", " 
			depth if n '"" swap' 		# if stack is empty, put "" into stack
			pop 						# pop "depth" command result
			"{" swap "}" gs gs 			# format a string
			. cl 						# show and clear
		}								# dispose the stack
;


:,			( -- )						# display contents of current stack horizontally
		{								# prepare new stack
			=pcp 						# copy parent stack contents
			depth 1- times glue
			. cl 						# show and clear
		}								# dispose the stack
;


#............................................................defining FUNCTIONS
#............... string utilities 

:map								# apply function to all stack items
		(s1-as_function -- )
		>function
		depth times '<function eval rot'
;		

:gather								# gathering stack items
		(s1-as_function -- )
		>function
		depth 1- times '<function eval'
;		


:each_x
		(s1_as_target s2_as_function s3_as_separate_method -- s3)
		>gathering_method 
		>separate_method 
		>function 
		>target
		{
			<target
			<separate_method eval
			<function map 
			<gathering_method gather
		}
;


:eachchar							# operation for each characters in string
		"s2c" "glue" each_x
;

:eachword 							# operation for each tokens in string
		(s1 s2-as-iterator -- s3)
		>iterator 
		>target
		{
			<target
			strwc >length 
			s2w 
			<length times '<iterator eval rot' 
			<length 1- times gs
		}
;



:ascii_codes						# string to integer in sequence
		"c2i" "s2c" "gs" each_x
;

:ascii_codes_rev					# integer sequence to string
		"eval i2c" "s2w" "glue" each_x
;


:replace_ 							# word replacing in string
		(s1 s2-as-iterator -- s3)
		>method
		>replacing_word 
		>finding_word 
	
		# step1 : make an iterator (string) for eachword
		{
			"dup " 
				<finding_word quote 
			"compare ifelse t 'pop pop " 
				<replacing_word quote
			"' pop"
			"glue" gather
		}
		
		# step2 : eachword/eachchar excution
	
		<method eval
;


:replace_word
		(s1 s2 s3 -- s4)
		"eachword" replace_;
		
:replace_char
		(s1 s2 s3 -- s4)
		"eachchar" replace_;

:nth_char (s i -- c)
		>index
		>str
		
		{
			<str
			strlen >len
			s2c
			<len <index <len % - times rot
			<len 1- times pop
		}
;

:nth_word (s i -- s)
		>index
		>str
		
		{
			<str
			s2w depth >n
			<n <index <n % - times rot
			<n 1- times pop
		}
;

:nth_insert_word (s i -- s)
	>pos >str >base 
	{
		<base
		s2w depth >n 
		<n <pos - times rot 
		<str 
		<pos 1+ times rot 
		<n times gs 
	}
;



#............................................................defining FUNCTIONS
#............... array handling utilities 

:array_delimiter
		( -- s)
		".";
		
:aw		(* s i -- )
		[ array_delimiter gw >^ ];
		
:ar		(s i -- *)
		[ array_delimiter gw <^ ];



#............................................................defining FUNCTIONS
#............... general utilities 

:apply
		>s
		depth times 
		:@
			<s eval
			rot
		;		
;

:seq 0 swap times 'push 1+' ;

:addall "+" gather;

:maxmin >comparator "2 npush - [ <comparator ] ifelse ^ 'pop pop' 'pop swap pop'" gather;
:max "p" maxmin;
:min "n" maxmin;

###:max "2 npush - ifelse p 'pop pop' 'pop swap pop'" gather;
###:min "2 npush - ifelse n 'pop pop' 'pop swap pop'" gather;



:prompt >$$PROMPT$;

print '"FILENAME_TO_REPLACE" loaded\n'        ### messege to identify the loading completed successfully



